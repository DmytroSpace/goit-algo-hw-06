import networkx as nx
import matplotlib.pyplot as plt

def bfs(graph, start):                           # BFS через чергу
    visited, queue = {start}, [start]            # Створюємо множини відвіданих вершин та черги
    path = []   

    while queue:                                 # Поки черга не пуста
        vertex = queue.pop(0)                    # Витягуємо вершини з верху стеку
        for neighbour in graph[vertex]:          # Для кожного сусіда вершини:
            if neighbour not in visited:         # якщо сусід ще не відвіданий
                visited.add(neighbour)           # Додаємо сусіда до відвіданих вершин
                queue.append(neighbour)          # Додаємо сусіда до черги
                path.append((vertex, neighbour)) # Додаємо ребро до шляху
    return path  

def dfs(graph, start):                           # DFS через стек
    visited, stack = set(), [start]              # Створюємо множини відвіданих вершин та стека
    path = [] 

    while stack:                                 # Поки стек не пустий
        vertex = stack.pop()                     # Витягуємо вершини з верху стеку
        if vertex not in visited:                # якщо вершина ще не відвідана:
            visited.add(vertex)                  # Додаємо вершину до відвіданих вершин
            for neighbour in graph[vertex]:      # Для кожного сусіда вершини
                if neighbour not in visited:     # якщо сусід ще не відвіданий:
                    stack.append(neighbour)      # Додаємо сусіда до стеку
                    path.append((vertex, neighbour))  # Додаємо ребро до шляху
    return path   

G = nx.Graph()                                   # Створюємо порожній граф

G.add_nodes_from(["Ковель", "Луцьк", "Дубно", "Тернопіль", "Чернівці", "Львів", "Рівне", "Житомир", "Київ", 
    "Полтава", "Харків", "Ужгород", "Мукачево", "Стрий", "Хмельницький", "Вінниця", "Умань", 
    "Кропивницький", "Дніпро", "Донецьк", "Дебальцеве", "Луганськ", "Чернігів", "Біла Церква", 
    "Одеса", "Миколаїв", "Херсон", "Мелітополь", "Маріуполь", "Запоріжжя", "Джанкой", "Сімферополь", "Ялта"
])

G.add_edges_from([("Ковель", "Луцьк"), ("Луцьк", "Дубно"), ("Дубно", "Тернопіль"), ("Тернопіль", "Чернівці"),
    ("Львів", "Дубно"), ("Дубно", "Рівне"), ("Рівне", "Житомир"), ("Житомир", "Київ"),
    ("Київ", "Полтава"), ("Полтава", "Харків"), ("Ужгород", "Мукачево"), ("Мукачево", "Стрий"), 
    ("Стрий", "Тернопіль"), ("Тернопіль", "Хмельницький"), ("Хмельницький", "Вінниця"), 
    ("Вінниця", "Умань"), ("Умань", "Кропивницький"), ("Кропивницький", "Дніпро"), 
    ("Дніпро", "Донецьк"), ("Донецьк", "Дебальцеве"), ("Дебальцеве", "Луганськ"), 
    ("Чернігів", "Київ"), ("Київ", "Біла Церква"), ("Біла Церква", "Умань"), 
    ("Умань", "Одеса"), ("Одеса", "Миколаїв"), ("Миколаїв", "Херсон"), 
    ("Херсон", "Мелітополь"), ("Мелітополь", "Маріуполь"), ("Харків", "Дніпро"), 
    ("Дніпро", "Запоріжжя"), ("Запоріжжя", "Мелітополь"), ("Мелітополь", "Джанкой"), 
    ("Джанкой", "Сімферополь"), ("Сімферополь", "Ялта"), ("Львів", "Стрий"), 
    ("Житомир", "Вінниця"), ("Донецьк", "Маріуполь"), ("Херсон", "Джанкой"), 
    ("Харків", "Дебальцеве"), ("Полтава", "Кропивницький")
])

positions = {"Ковель": (25.1, 51.2), "Луцьк": (25.3, 50.7), "Дубно": (25.7, 50.4), "Тернопіль": (25.6, 49.6),
    "Чернівці": (25.9, 48.3), "Львів": (24.0, 49.8), "Рівне": (26.2, 50.6), "Житомир": (28.7, 50.3),
    "Київ": (30.5, 50.4), "Полтава": (34.5, 49.6), "Харків": (36.2, 50.0), "Ужгород": (22.3, 48.6), 
    "Мукачево": (22.7, 48.4), "Стрий": (23.5, 49.3), "Хмельницький": (27.0, 49.4), 
    "Вінниця": (28.5, 49.2), "Умань": (30.2, 48.7), "Кропивницький": (32.3, 48.5), 
    "Дніпро": (35.0, 48.4), "Донецьк": (37.8, 48.0), "Дебальцеве": (38.4, 48.3), 
    "Луганськ": (39.3, 48.6), "Чернігів": (31.3, 51.5), "Біла Церква": (30.0, 49.8), 
    "Одеса": (30.7, 46.5), "Миколаїв": (31.9, 46.9), "Херсон": (32.6, 46.6), 
    "Мелітополь": (35.3, 46.8), "Маріуполь": (37.5, 47.1), "Запоріжжя": (35.2, 47.8), 
    "Джанкой": (34.4, 45.7), "Сімферополь": (34.1, 44.9), "Ялта": (34.2, 44.5)
}
# Виконання обох алгоритмів з початковою вершиною "Чернігів"
dfs_path = dfs(G, "Чернігів") 
bfs_path = bfs(G, "Чернігів") 

# Виведення результатів
print(f"DFS path: {dfs_path}") 
print(f"BFS path: {bfs_path}") 

nx.draw(G, pos=positions, with_labels=True, node_color='skyblue', font_weight='medium')  # Візуалізуємо граф
plt.show()
41
32